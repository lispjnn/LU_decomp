# -*- coding: utf-8 -*-
"""GE w/ PP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c8_m48fZxCNlGez9kEyBDSwe8-nYWWTZ
"""

import numpy as np
from scipy.linalg import lu

def gaussElim(A):
  '''

  Calculates LU decomposition of square matrix

  Given an NxN matrix, A, this function uses Gaussian Elimination with Partial
  Pivoting to calculate its LU decomposition

  :param A: Array of number arrays
  :return: A (upper matrix), B (lower matrix), P (pivot vector)
  )
  '''

  nrows = A.shape [0]
  ncols = A.shape [1]
  P = np.arange(nrows) # Default pivot vector is [0, 1, ..., nrows]
  B = np.zeros((nrows,nrows))
  lik = 0

  for k in range(ncols-1):
    x = np.argmax(A[k:, k]) #Find pivot's index
    temp = P[k]
    P[k] = P[x+k] #Swap pivot's row with kth row
    P[x+k] = temp
    A = A[P, :] #Rearrange A according to pivot vector

    for i in range(k+1, nrows): #Perform Gaussian Elimination
      lik = A[i, k] / A[k,k]
      B[i,k] = lik
      for j in range(k, ncols): # Zero out column
        A[i,j] -= lik*A[k,j]

  for l in range(nrows):
    B[l,l] = 1

  return A,B,P

# Test Case comparing gaussElim() with scipy's lu() implementation
A = np.array ([[1,1,1],
  [1,1,2],
  [1,2,2]])
print(gaussElim(A))
print()

B = np.array ([[1,1,1],
  [1,1,2],
  [1,2,2]])
p,l,u = lu(B)

print(u)
print(l)
print(p)